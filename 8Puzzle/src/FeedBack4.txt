See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 249 warnings)

Correctness:  40/45 tests passed
Memory:       3/3 tests passed
Timing:       100/125 tests passed

Aggregate score: 89.33%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.7K Jul 13 12:04 Board.java
4.0K Jul 13 12:04 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'board', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'blocks' and store that copy in the instance variable 'board'.   At Board.java:[line 14]
L D NS_NON_SHORT_CIRCUIT NS: Questionable use of a non-short-circuit logic operator ('&' or '|'). Did you mean to use '&&' or '||' instead?  At Board.java:[line 40]
M P UUF_UNUSED_FIELD UuF: The instance (or static) variable 'move' is never used. Consider removing it from the class.  In Solver.java
Warnings generated: 3

================================================================


% pmd *.java
*-----------------------------------------------------------
Solver.java:9: Can you replace the instance (or static) variable 'initial' with a local variable? [SingularField]
Solver.java:9: The private instance (or static) variable 'initial' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:10: The private instance (or static) variable 'solution' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:11: The private instance (or static) variable 'issolvable' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:5: Do not use .* in import statements. [AvoidStarImport]
[WARN] Board.java:10:23: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:13:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:19:27: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:23:25: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:25:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:25:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:26:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:21: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:26:22: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:26:23: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:27: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:26:31: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:27:20: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:27:21: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:27:33: '%' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:27:34: '%' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:28:24: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:28:30: '&&' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:28:32: '&&' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:28:39: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:28:41: '!=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:35:27: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:37:25: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:37:26: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:38:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:38:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:38:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:38:21: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:38:22: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:38:23: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:38:27: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:38:31: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:39:20: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:39:21: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:39:33: '%' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:39:34: '%' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 249 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
    java.lang.IllegalArgumentException

    Board.equals(Board.java:70)
    TestBoard.test10a(TestBoard.java:996)
    TestBoard.main(TestBoard.java:1378)

    - fails when argument is null
  * argument is Board of different dimension
==> FAILED

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
    - manhattan() different before and after changing 2d array
    - before = 18
    - after  = 3349
==> FAILED

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 20/22 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: call solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: call moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: call solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testUnsolvableSolution(TestSolver.java:295)
    TestSolver.test7(TestSolver.java:695)
    TestSolver.main(TestSolver.java:891)

  * puzzle2x2-unsolvable2.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testUnsolvableSolution(TestSolver.java:295)
    TestSolver.test7(TestSolver.java:696)
    TestSolver.main(TestSolver.java:891)

  * puzzle3x3-unsolvable1.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testUnsolvableSolution(TestSolver.java:295)
    TestSolver.test7(TestSolver.java:697)
    TestSolver.main(TestSolver.java:891)

  * puzzle3x3-unsolvable2.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testUnsolvableSolution(TestSolver.java:295)
    TestSolver.test7(TestSolver.java:698)
    TestSolver.main(TestSolver.java:891)

  * puzzle4x4-unsolvable.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testUnsolvableSolution(TestSolver.java:295)
    TestSolver.test7(TestSolver.java:699)
    TestSolver.main(TestSolver.java:891)

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testImmutableSolver(TestSolver.java:440)
    TestSolver.testImmutableSolver(TestSolver.java:529)
    TestSolver.test8b(TestSolver.java:721)
    TestSolver.main(TestSolver.java:897)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.moves() -> -1
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.solution()
  * puzzle3x3-unsolvable2.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testImmutableSolver(TestSolver.java:440)
    TestSolver.testImmutableSolver(TestSolver.java:529)
    TestSolver.test8b(TestSolver.java:722)
    TestSolver.main(TestSolver.java:897)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
  * puzzle4x4-unsolvable.txt
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testImmutableSolver(TestSolver.java:440)
    TestSolver.testImmutableSolver(TestSolver.java:529)
    TestSolver.test8b(TestSolver.java:723)
    TestSolver.main(TestSolver.java:897)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.moves() -> -1
          solver.solution()
  * random 2-by-2 unsolvable boards
    java.lang.IllegalArgumentException

    Solver.solution(Solver.java:83)
    TestSolver.testImmutableSolver(TestSolver.java:440)
    TestSolver.testImmutableSolverUnsolvableBoards(TestSolver.java:513)
    TestSolver.test8b(TestSolver.java:724)
    TestSolver.main(TestSolver.java:897)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.solution()
    - failed on trial 1 of 10

==> FAILED

Test 9: check whether equals() method in Board is called
        with an argument of the wrong type
  * puzzle00.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: call solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 20/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 2808 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.57
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 3448 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.57
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4088 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.57
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)                                                                  
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Maximum allowed time per puzzle is 10.0 seconds.

Running 125 total tests.

Test 1: measure CPU time and check for correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.00 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.00 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.02 
=> passed  puzzle30.txt      30    3     0.06 
=> passed  puzzle31.txt      31    3     0.06 
=> passed  puzzle39.txt      39    4     0.04 
=> passed  puzzle41.txt      41    5     0.03 
=> passed  puzzle34.txt      34    4     0.16 
=> passed  puzzle37.txt      37    4     0.06 
=> passed  puzzle44.txt      44    5     0.19 
=> passed  puzzle32.txt      32    4     0.31 
=> passed  puzzle35.txt      35    4     0.15 
=> passed  puzzle33.txt      33    4     0.31 
=> passed  puzzle43.txt      43    4     0.46 
=> passed  puzzle46.txt      46    4     0.43 
=> passed  puzzle40.txt      40    4     0.21 
=> passed  puzzle36.txt      36    4     1.78 
=> passed  puzzle45.txt      45    4     0.68 
==> 25/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
=> passed  puzzle20.txt       1120              674              446         
=> passed  puzzle22.txt       3010             1776             1234         
=> passed  puzzle21.txt       1981             1174              807         
=> passed  puzzle23.txt       4386             2608             1778         
=> passed  puzzle24.txt       2268             1378              890         
=> passed  puzzle25.txt       7808             4662             3146         
=> passed  puzzle27.txt       5975             3646             2329         
=> passed  puzzle29.txt      10957             6686             4271         
=> passed  puzzle26.txt       5651             3414             2237         
=> passed  puzzle28.txt      15597             9498             6099         
=> passed  puzzle30.txt      33991            20706            13285         
=> passed  puzzle31.txt      40611            24844            15767         
=> passed  puzzle39.txt      40736            20104            20632         
=> passed  puzzle41.txt      28335            12166            16169         
=> passed  puzzle34.txt     149059            71582            77477         
=> passed  puzzle37.txt      63351            30360            32991         
=> passed  puzzle44.txt     151285            68060            83225         
=> passed  puzzle32.txt     400723           191824           208899         
=> passed  puzzle35.txt     236211           116918           119293         
=> passed  puzzle33.txt     461514           221840           239674         
=> passed  puzzle43.txt     648656           319146           329510         
=> passed  puzzle46.txt     599103           299782           299321         
=> passed  puzzle40.txt     315115           155066           160049         
=> passed  puzzle36.txt    1987602           966996          1020606         
=> passed  puzzle45.txt     929747           459268           470479         
==> 25/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0         
=> passed  puzzle22.txt            0            0            0         
=> passed  puzzle21.txt            0            0            0         
=> passed  puzzle23.txt            0            0            0         
=> passed  puzzle24.txt            0            0            0         
=> passed  puzzle25.txt            0            0            0         
=> passed  puzzle27.txt            0            0            0         
=> passed  puzzle29.txt            0            0            0         
=> passed  puzzle26.txt            0            0            0         
=> passed  puzzle28.txt            0            0            0         
=> passed  puzzle30.txt            0            0            0         
=> passed  puzzle31.txt            0            0            0         
=> passed  puzzle39.txt            0            0            0         
=> passed  puzzle41.txt            0            0            0         
=> passed  puzzle34.txt            0            0            0         
=> passed  puzzle37.txt            0            0            0         
=> passed  puzzle44.txt            0            0            0         
=> passed  puzzle32.txt            0            0            0         
=> passed  puzzle35.txt            0            0            0         
=> passed  puzzle33.txt            0            0            0         
=> passed  puzzle43.txt            0            0            0         
=> passed  puzzle46.txt            0            0            0         
=> passed  puzzle40.txt            0            0            0         
=> passed  puzzle36.txt            0            0            0         
=> passed  puzzle45.txt            0            0            0         
==> 25/25 tests passed



Test 4: count Board operations (that should get called)

               filename    Board()         manhattan()
------------------------------------------------------
=> passed  puzzle20.txt       1792               14749         
=> passed  puzzle22.txt       4784               47283         
=> passed  puzzle21.txt       3153               28528         
=> passed  puzzle23.txt       6992               73381         
=> passed  puzzle24.txt       3644               35449         
=> passed  puzzle25.txt      12468              145307         
=> passed  puzzle27.txt       9619              112400         
=> passed  puzzle29.txt      17641              224658         
=> passed  puzzle26.txt       9063              103658         
=> passed  puzzle28.txt      25093              337980         
=> passed  puzzle30.txt      54695              815226         
=> passed  puzzle31.txt      65453             1003600         
=> passed  puzzle39.txt      60838              881923         
=> passed  puzzle41.txt      40499              508884         
=> passed  puzzle34.txt     220639             3455308         
=> passed  puzzle37.txt      93709             1371830         
=> passed  puzzle44.txt     219343             3436158         
=> passed  puzzle32.txt     592545             9556688         
=> passed  puzzle35.txt     353127             5986326         
=> passed  puzzle33.txt     683352            11501293         
=> passed  puzzle43.txt     967800            18267159         
=> passed  puzzle46.txt     898883            17719366         
=> passed  puzzle40.txt     470179             8276474         
=> passed  puzzle36.txt    2954596            58775355         
=> passed  puzzle45.txt    1389013            27854790         
==> 25/25 tests passed



Test 5: count Board operations (that should get called),
        rejecting if doesn't adhere to stricter caching limits

               filename    Board()         manhattan()
------------------------------------------------------
=> FAILED  puzzle20.txt       1792               14749   (4.3x)
=> FAILED  puzzle22.txt       4784               47283   (5.7x)
=> FAILED  puzzle21.txt       3153               28528   (3.4x)
=> FAILED  puzzle23.txt       6992               73381   (5.8x)
=> FAILED  puzzle24.txt       3644               35449   (2.7x)
=> FAILED  puzzle25.txt      12468              145307   (5.9x)
=> FAILED  puzzle27.txt       9619              112400   (4.2x)
=> FAILED  puzzle29.txt      17641              224658   (8.0x)
=> FAILED  puzzle26.txt       9063              103658   (3.6x)
=> FAILED  puzzle28.txt      25093              337980   (5.2x)
=> FAILED  puzzle30.txt      54695              815226   (7.9x)
=> FAILED  puzzle31.txt      65453             1003600   (9.1x)
=> FAILED  puzzle39.txt      60838              881923   (5.5x)
=> FAILED  puzzle41.txt      40499              508884   (2.0x)
=> FAILED  puzzle34.txt     220639             3455308  (10.2x)
=> FAILED  puzzle37.txt      93709             1371830   (3.7x)
=> FAILED  puzzle44.txt     219343             3436158   (5.7x)
=> FAILED  puzzle32.txt     592545             9556688   (8.3x)
=> FAILED  puzzle35.txt     353127             5986326   (5.1x)
=> FAILED  puzzle33.txt     683352            11501293   (8.3x)
=> FAILED  puzzle43.txt     967800            18267159   (7.8x)
=> FAILED  puzzle46.txt     898883            17719366   (7.6x)
=> FAILED  puzzle40.txt     470179             8276474   (3.3x)
=> FAILED  puzzle36.txt    2954596            58775355  (12.6x)
=> FAILED  puzzle45.txt    1389013            27854790   (5.1x)
==> 0/25 tests passed


Total: 100/125 tests passed!


================================================================